#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::audio_info::AudioInfo;
use crate::picture::MimeType;
use crate::picture::Picture;
use crate::picture::PictureType;
use crate::tag::Tag;
use crate::tag::TagType;
use crate::taggy_file::FileType;
use crate::taggy_file::TaggyFile;

// Section: wire functions

fn wire_read_from_path_impl(port_: MessagePort, path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TaggyFile>(
        WrapInfo {
            debug_name: "read_from_path",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| read_from_path(api_path)
        },
    )
}
fn wire_write_all_impl(
    port_: MessagePort,
    path: impl Wire2Api<String> + UnwindSafe,
    tags: impl Wire2Api<Vec<Tag>> + UnwindSafe,
    should_override: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "write_all",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            let api_tags = tags.wire2api();
            let api_should_override = should_override.wire2api();
            move |task_callback| write_all(api_path, api_tags, api_should_override)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<MimeType> for i32 {
    fn wire2api(self) -> MimeType {
        match self {
            0 => MimeType::Png,
            1 => MimeType::Jpeg,
            2 => MimeType::Tiff,
            3 => MimeType::Bmp,
            4 => MimeType::Gif,
            5 => MimeType::Unknown,
            6 => MimeType::None,
            _ => unreachable!("Invalid variant for MimeType: {}", self),
        }
    }
}

impl Wire2Api<PictureType> for i32 {
    fn wire2api(self) -> PictureType {
        match self {
            0 => PictureType::Other,
            1 => PictureType::Icon,
            2 => PictureType::OtherIcon,
            3 => PictureType::CoverFront,
            4 => PictureType::CoverBack,
            5 => PictureType::Leaflet,
            6 => PictureType::Media,
            7 => PictureType::LeadArtist,
            8 => PictureType::Artist,
            9 => PictureType::Conductor,
            10 => PictureType::Band,
            11 => PictureType::Composer,
            12 => PictureType::Lyricist,
            13 => PictureType::RecordingLocation,
            14 => PictureType::DuringRecording,
            15 => PictureType::DuringPerformance,
            16 => PictureType::ScreenCapture,
            17 => PictureType::BrightFish,
            18 => PictureType::Illustration,
            19 => PictureType::BandLogo,
            20 => PictureType::PublisherLogo,
            21 => PictureType::Undefined,
            _ => unreachable!("Invalid variant for PictureType: {}", self),
        }
    }
}

impl Wire2Api<TagType> for i32 {
    fn wire2api(self) -> TagType {
        match self {
            0 => TagType::Ape,
            1 => TagType::Id3v1,
            2 => TagType::Id3v2,
            3 => TagType::Mp4Ilst,
            4 => TagType::VorbisComments,
            5 => TagType::RiffInfo,
            6 => TagType::AiffText,
            7 => TagType::Other,
            _ => unreachable!("Invalid variant for TagType: {}", self),
        }
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for AudioInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.duration_sec.into_dart(),
            self.overall_bitrate.into_dart(),
            self.audio_bitrate.into_dart(),
            self.sample_rate.into_dart(),
            self.bit_depth.into_dart(),
            self.channels.into_dart(),
            self.channel_mask.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AudioInfo {}
impl rust2dart::IntoIntoDart<AudioInfo> for AudioInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for FileType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Aac => 0,
            Self::Aiff => 1,
            Self::Ape => 2,
            Self::Flac => 3,
            Self::Mpeg => 4,
            Self::Mp4 => 5,
            Self::Mpc => 6,
            Self::Opus => 7,
            Self::Vorbis => 8,
            Self::Speex => 9,
            Self::Wav => 10,
            Self::WavPack => 11,
            Self::Other => 12,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FileType {}
impl rust2dart::IntoIntoDart<FileType> for FileType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MimeType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Png => 0,
            Self::Jpeg => 1,
            Self::Tiff => 2,
            Self::Bmp => 3,
            Self::Gif => 4,
            Self::Unknown => 5,
            Self::None => 6,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MimeType {}
impl rust2dart::IntoIntoDart<MimeType> for MimeType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Picture {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.pic_type.into_into_dart().into_dart(),
            self.mime_type.into_dart(),
            self.width.into_dart(),
            self.height.into_dart(),
            self.color_depth.into_dart(),
            self.num_colors.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Picture {}
impl rust2dart::IntoIntoDart<Picture> for Picture {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PictureType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Other => 0,
            Self::Icon => 1,
            Self::OtherIcon => 2,
            Self::CoverFront => 3,
            Self::CoverBack => 4,
            Self::Leaflet => 5,
            Self::Media => 6,
            Self::LeadArtist => 7,
            Self::Artist => 8,
            Self::Conductor => 9,
            Self::Band => 10,
            Self::Composer => 11,
            Self::Lyricist => 12,
            Self::RecordingLocation => 13,
            Self::DuringRecording => 14,
            Self::DuringPerformance => 15,
            Self::ScreenCapture => 16,
            Self::BrightFish => 17,
            Self::Illustration => 18,
            Self::BandLogo => 19,
            Self::PublisherLogo => 20,
            Self::Undefined => 21,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PictureType {}
impl rust2dart::IntoIntoDart<PictureType> for PictureType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Tag {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.tag_type.into_dart(),
            self.pictures.into_into_dart().into_dart(),
            self.track_title.into_dart(),
            self.track_artist.into_dart(),
            self.album.into_dart(),
            self.album_artist.into_dart(),
            self.producer.into_dart(),
            self.track_number.into_dart(),
            self.track_total.into_dart(),
            self.disk_number.into_dart(),
            self.disk_total.into_dart(),
            self.year.into_dart(),
            self.recording_date.into_dart(),
            self.original_release_date.into_dart(),
            self.language.into_dart(),
            self.lyrics.into_dart(),
            self.genre.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Tag {}
impl rust2dart::IntoIntoDart<Tag> for Tag {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TagType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Ape => 0,
            Self::Id3v1 => 1,
            Self::Id3v2 => 2,
            Self::Mp4Ilst => 3,
            Self::VorbisComments => 4,
            Self::RiffInfo => 5,
            Self::AiffText => 6,
            Self::Other => 7,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TagType {}
impl rust2dart::IntoIntoDart<TagType> for TagType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TaggyFile {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.file_type.into_dart(),
            self.size.into_dart(),
            self.audio.into_into_dart().into_dart(),
            self.tags.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TaggyFile {}
impl rust2dart::IntoIntoDart<TaggyFile> for TaggyFile {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_read_from_path(port_: MessagePort, path: String) {
        wire_read_from_path_impl(port_, path)
    }

    #[wasm_bindgen]
    pub fn wire_write_all(port_: MessagePort, path: String, tags: JsValue, should_override: bool) {
        wire_write_all_impl(port_, path, tags, should_override)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<Vec<Picture>> for JsValue {
        fn wire2api(self) -> Vec<Picture> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<Tag>> for JsValue {
        fn wire2api(self) -> Vec<Tag> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<Picture> for JsValue {
        fn wire2api(self) -> Picture {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                6,
                "Expected 6 elements, got {}",
                self_.length()
            );
            Picture {
                pic_type: self_.get(0).wire2api(),
                mime_type: self_.get(1).wire2api(),
                width: self_.get(2).wire2api(),
                height: self_.get(3).wire2api(),
                color_depth: self_.get(4).wire2api(),
                num_colors: self_.get(5).wire2api(),
            }
        }
    }

    impl Wire2Api<Tag> for JsValue {
        fn wire2api(self) -> Tag {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                17,
                "Expected 17 elements, got {}",
                self_.length()
            );
            Tag {
                tag_type: self_.get(0).wire2api(),
                pictures: self_.get(1).wire2api(),
                track_title: self_.get(2).wire2api(),
                track_artist: self_.get(3).wire2api(),
                album: self_.get(4).wire2api(),
                album_artist: self_.get(5).wire2api(),
                producer: self_.get(6).wire2api(),
                track_number: self_.get(7).wire2api(),
                track_total: self_.get(8).wire2api(),
                disk_number: self_.get(9).wire2api(),
                disk_total: self_.get(10).wire2api(),
                year: self_.get(11).wire2api(),
                recording_date: self_.get(12).wire2api(),
                original_release_date: self_.get(13).wire2api(),
                language: self_.get(14).wire2api(),
                lyrics: self_.get(15).wire2api(),
                genre: self_.get(16).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<bool> for JsValue {
        fn wire2api(self) -> bool {
            self.is_truthy()
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<MimeType> for JsValue {
        fn wire2api(self) -> MimeType {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<Option<String>> for JsValue {
        fn wire2api(self) -> Option<String> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<MimeType>> for JsValue {
        fn wire2api(self) -> Option<MimeType> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<TagType>> for JsValue {
        fn wire2api(self) -> Option<TagType> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<u32>> for JsValue {
        fn wire2api(self) -> Option<u32> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<PictureType> for JsValue {
        fn wire2api(self) -> PictureType {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<TagType> for JsValue {
        fn wire2api(self) -> TagType {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_read_from_path(port_: i64, path: *mut wire_uint_8_list) {
        wire_read_from_path_impl(port_, path)
    }

    #[no_mangle]
    pub extern "C" fn wire_write_all(
        port_: i64,
        path: *mut wire_uint_8_list,
        tags: *mut wire_list_tag,
        should_override: bool,
    ) {
        wire_write_all_impl(port_, path, tags, should_override)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_mime_type_0(value: i32) -> *mut i32 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_tag_type_0(value: i32) -> *mut i32 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_u32_0(value: u32) -> *mut u32 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_list_picture_0(len: i32) -> *mut wire_list_picture {
        let wrap = wire_list_picture {
            ptr: support::new_leak_vec_ptr(<wire_Picture>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_tag_0(len: i32) -> *mut wire_list_tag {
        let wrap = wire_list_tag {
            ptr: support::new_leak_vec_ptr(<wire_Tag>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<MimeType> for *mut i32 {
        fn wire2api(self) -> MimeType {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MimeType>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<TagType> for *mut i32 {
        fn wire2api(self) -> TagType {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<TagType>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<u32> for *mut u32 {
        fn wire2api(self) -> u32 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }

    impl Wire2Api<Vec<Picture>> for *mut wire_list_picture {
        fn wire2api(self) -> Vec<Picture> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<Tag>> for *mut wire_list_tag {
        fn wire2api(self) -> Vec<Tag> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }

    impl Wire2Api<Picture> for wire_Picture {
        fn wire2api(self) -> Picture {
            Picture {
                pic_type: self.pic_type.wire2api(),
                mime_type: self.mime_type.wire2api(),
                width: self.width.wire2api(),
                height: self.height.wire2api(),
                color_depth: self.color_depth.wire2api(),
                num_colors: self.num_colors.wire2api(),
            }
        }
    }

    impl Wire2Api<Tag> for wire_Tag {
        fn wire2api(self) -> Tag {
            Tag {
                tag_type: self.tag_type.wire2api(),
                pictures: self.pictures.wire2api(),
                track_title: self.track_title.wire2api(),
                track_artist: self.track_artist.wire2api(),
                album: self.album.wire2api(),
                album_artist: self.album_artist.wire2api(),
                producer: self.producer.wire2api(),
                track_number: self.track_number.wire2api(),
                track_total: self.track_total.wire2api(),
                disk_number: self.disk_number.wire2api(),
                disk_total: self.disk_total.wire2api(),
                year: self.year.wire2api(),
                recording_date: self.recording_date.wire2api(),
                original_release_date: self.original_release_date.wire2api(),
                language: self.language.wire2api(),
                lyrics: self.lyrics.wire2api(),
                genre: self.genre.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_picture {
        ptr: *mut wire_Picture,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_tag {
        ptr: *mut wire_Tag,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Picture {
        pic_type: i32,
        mime_type: *mut i32,
        width: *mut u32,
        height: *mut u32,
        color_depth: *mut u32,
        num_colors: *mut u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Tag {
        tag_type: *mut i32,
        pictures: *mut wire_list_picture,
        track_title: *mut wire_uint_8_list,
        track_artist: *mut wire_uint_8_list,
        album: *mut wire_uint_8_list,
        album_artist: *mut wire_uint_8_list,
        producer: *mut wire_uint_8_list,
        track_number: *mut u32,
        track_total: *mut u32,
        disk_number: *mut u32,
        disk_total: *mut u32,
        year: *mut u32,
        recording_date: *mut wire_uint_8_list,
        original_release_date: *mut wire_uint_8_list,
        language: *mut wire_uint_8_list,
        lyrics: *mut wire_uint_8_list,
        genre: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_Picture {
        fn new_with_null_ptr() -> Self {
            Self {
                pic_type: Default::default(),
                mime_type: core::ptr::null_mut(),
                width: core::ptr::null_mut(),
                height: core::ptr::null_mut(),
                color_depth: core::ptr::null_mut(),
                num_colors: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Picture {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_Tag {
        fn new_with_null_ptr() -> Self {
            Self {
                tag_type: core::ptr::null_mut(),
                pictures: core::ptr::null_mut(),
                track_title: core::ptr::null_mut(),
                track_artist: core::ptr::null_mut(),
                album: core::ptr::null_mut(),
                album_artist: core::ptr::null_mut(),
                producer: core::ptr::null_mut(),
                track_number: core::ptr::null_mut(),
                track_total: core::ptr::null_mut(),
                disk_number: core::ptr::null_mut(),
                disk_total: core::ptr::null_mut(),
                year: core::ptr::null_mut(),
                recording_date: core::ptr::null_mut(),
                original_release_date: core::ptr::null_mut(),
                language: core::ptr::null_mut(),
                lyrics: core::ptr::null_mut(),
                genre: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Tag {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
